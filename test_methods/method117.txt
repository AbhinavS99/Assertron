[[[public static void flipCopyWithGamma(DoubleBuffer srcBuf, int srcBufferIndex, int srcStep, DoubleBuffer dstBuf, int dstBufferIndex, int dstStep, double gamma, boolean flip, int channels) {
    assert srcBuf != dstBuf;
    int w = Math.min(srcStep, dstStep);
    int srcLine = srcBufferIndex, dstLine = dstBufferIndex;
    double[] buffer = new double[channels];
    while (srcLine < srcBuf.capacity() && dstLine < dstBuf.capacity()) {
        if (flip) {
            srcBufferIndex = srcBuf.capacity() - srcLine - srcStep;
        } else {
            srcBufferIndex = srcLine;
        }
        dstBufferIndex = dstLine;
        w = Math.min(Math.min(w, srcBuf.capacity() - srcBufferIndex), dstBuf.capacity() - dstBufferIndex);
        if (channels > 1) {
            for (int x = 0; x < w; x += channels) {
                for (int z = 0; z < channels; z++) {
                    double in = srcBuf.get(srcBufferIndex++);
                    double out;
                    if (gamma == 1.0) {
                        out = in;
                    } else {
                        out = Math.pow(in, gamma);
                    }
                    buffer[z] = out;
                }
                for (int z = channels - 1; z >= 0; z--) {
                    dstBuf.put(dstBufferIndex++, buffer[z]);
                }
            }
        } else {
            for (int x = 0; x < w; x++) {
                double in = srcBuf.get(srcBufferIndex++);
                double out;
                if (gamma == 1.0) {
                    out = in;
                } else {
                    out = Math.pow(in, gamma);
                }
                dstBuf.put(dstBufferIndex++, out);
            }
        }
        srcLine += srcStep;
        dstLine += dstStep;
    }
}]]],