[[[protected void initHostPointerAndIndexer() {
    if (length() == 0)
        return;
    if (allocationPoint.getHostPointer() == null) {
        val location = allocationPoint.getAllocationStatus();
        if (parentWorkspace == null) {
            // let cpp allocate primary buffer
            NativeOpsHolder.getInstance().getDeviceNativeOps().dbAllocatePrimaryBuffer(ptrDataBuffer);
        } else {
            // log.info("ws alloc step");
            val ptr = parentWorkspace.alloc(this.length * this.elementSize, MemoryKind.HOST, this.dataType(), false);
            ptrDataBuffer.setPrimaryBuffer(ptr, this.length);
        }
        this.allocationPoint.setAllocationStatus(location);
        this.allocationPoint.tickDeviceWrite();
    }
    val hostPointer = allocationPoint.getHostPointer();
    assert hostPointer != null;
    switch(dataType()) {
        case DOUBLE:
            this.pointer = new CudaPointer(hostPointer, length, 0).asDoublePointer();
            indexer = DoubleIndexer.create((DoublePointer) pointer);
            break;
        case FLOAT:
            this.pointer = new CudaPointer(hostPointer, length, 0).asFloatPointer();
            indexer = FloatIndexer.create((FloatPointer) pointer);
            break;
        case UINT32:
            this.pointer = new CudaPointer(hostPointer, length, 0).asIntPointer();
            indexer = UIntIndexer.create((IntPointer) pointer);
            break;
        case INT:
            this.pointer = new CudaPointer(hostPointer, length, 0).asIntPointer();
            indexer = IntIndexer.create((IntPointer) pointer);
            break;
        case BFLOAT16:
            this.pointer = new CudaPointer(hostPointer, length, 0).asShortPointer();
            indexer = Bfloat16Indexer.create((ShortPointer) pointer);
            break;
        case HALF:
            this.pointer = new CudaPointer(hostPointer, length, 0).asShortPointer();
            indexer = HalfIndexer.create((ShortPointer) pointer);
            break;
        // Fall through
        case UINT64:
        case LONG:
            this.pointer = new CudaPointer(hostPointer, length, 0).asLongPointer();
            indexer = LongIndexer.create((LongPointer) pointer);
            break;
        case UINT16:
            this.pointer = new CudaPointer(hostPointer, length, 0).asShortPointer();
            indexer = UShortIndexer.create((ShortPointer) pointer);
            break;
        case SHORT:
            this.pointer = new CudaPointer(hostPointer, length, 0).asShortPointer();
            indexer = ShortIndexer.create((ShortPointer) pointer);
            break;
        case UBYTE:
            this.pointer = new CudaPointer(hostPointer, length, 0).asBytePointer();
            indexer = UByteIndexer.create((BytePointer) pointer);
            break;
        case BYTE:
            this.pointer = new CudaPointer(hostPointer, length, 0).asBytePointer();
            indexer = ByteIndexer.create((BytePointer) pointer);
            break;
        case BOOL:
            this.pointer = new CudaPointer(hostPointer, length, 0).asBooleanPointer();
            indexer = BooleanIndexer.create((BooleanPointer) pointer);
            break;
        case UTF8:
            this.pointer = new CudaPointer(hostPointer, length, 0).asBytePointer();
            indexer = ByteIndexer.create((BytePointer) pointer);
            break;
        default:
            throw new UnsupportedOperationException();
    }
}]]],