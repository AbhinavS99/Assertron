[[[@Override
public MetadataConnection<SqlConnection> getConnection(String operator, Map<String, Object> params) throws Exception {
    String host = String.valueOf(params.getOrDefault(SqlParamsMapper.PARAM_SQL_HOST.getValue(), ""));
    // After deserialize, Integer will be Double, Why?
    Integer port = (Double.valueOf(String.valueOf(params.getOrDefault(SqlParamsMapper.PARAM_SQL_PORT.getValue(), 0)))).intValue();
    String username = String.valueOf(params.getOrDefault(SqlParamsMapper.PARAM_SQL_USERNAME.getValue(), ""));
    String password = String.valueOf(params.getOrDefault(SqlParamsMapper.PARAM_SQL_PASSWORD.getValue(), ""));
    // In PG, each database under the same instance is completely independent, and the table is
    // stored under the catalog with the same library name.
    // \c (\connect) Behind the dbname command is to close the current connection and create a
    // new connection to achieve database switching
    // Cannot directly switch to another database under the current database connection, and
    // cannot show tables from xxxx, select * from database.table like MySQL
    String database = String.valueOf(params.getOrDefault(SqlParamsMapper.PARAM_SQL_DATABASE.getValue(), ""));
    Map<String, Object> extraParams = new HashMap<>();
    Object sqlParamObj = params.get(SqlParamsMapper.PARAM_SQL_EXTRA_PARAMS.getValue());
    if (null != sqlParamObj) {
        if (!(sqlParamObj instanceof Map)) {
            extraParams = Json.fromJson(String.valueOf(sqlParamObj), Map.class, String.class, Object.class);
        } else {
            extraParams = (Map<String, Object>) sqlParamObj;
        }
    }
    assert extraParams != null;
    if (Strings.isBlank(database)) {
        database = "";
    }
    return new MetadataConnection<>(new SqlConnection(host, port, username, password, database, extraParams));
}]]],